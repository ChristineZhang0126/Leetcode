# 1347. Minimum Number of Steps to Make Two Strings Anagram
# Solved
# Medium
# Topics
# Companies
# Hint
# You are given two strings of the same length s and t. In one step you can choose any character of t and replace it with another character.

# Return the minimum number of steps to make t an anagram of s.

# An Anagram of a string is a string that contains the same characters with a different (or the same) ordering.

 

# Example 1:

# Input: s = "bab", t = "aba"
# Output: 1
# Explanation: Replace the first 'a' in t with b, t = "bba" which is anagram of s.
# Example 2:

# Input: s = "leetcode", t = "practice"
# Output: 5
# Explanation: Replace 'p', 'r', 'a', 'i' and 'c' from t with proper characters to make t anagram of s.
# Example 3:

# Input: s = "anagram", t = "mangaar"
# Output: 0
# Explanation: "anagram" and "mangaar" are anagrams.
class Solution(object):
    def minSteps(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: int
        """
        # aaabc abb
        # bbbbc aab
        first_dict = {}
        second_dict = {}
        for each in range(len(s)):
            if s[each] not in first_dict:
                first_dict[s[each]] = 1
            else:
                first_dict[s[each]] += 1
            if t[each] not in second_dict:
                second_dict[t[each]] = 1
            else:
                second_dict[t[each]] += 1
        if first_dict == second_dict:
            return 0
        for all_num in first_dict:
            if all_num in second_dict:
                if first_dict[all_num] > second_dict[all_num]:
                    first_dict[all_num] = first_dict[all_num] - second_dict[all_num]
                    second_dict[all_num] = 0
                # elif first_dict[all_num] < second_dict[all_num]:
                #     second_dict[all_num] =  second_dict[all_num] - first_dict[all_num]
                #     first_dict[all_num] = 0
                else:
                    first_dict[all_num] = 0
                   # second_dict[all_num] = 0
        #return sum(first_dict.keys()) + sum(second_dict.keys())
        final = 0
        for each in list(first_dict.values()):
            final += each
        # for each in list(second_dict.keys()):
        #     final += each
        return final

