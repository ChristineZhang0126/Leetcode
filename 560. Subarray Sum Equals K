# 560. Subarray Sum Equals K
# Solved
# Medium
# Topics
# Companies
# Hint
# Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.

# A subarray is a contiguous non-empty sequence of elements within an array.

 

# Example 1:

# Input: nums = [1,1,1], k = 2
# Output: 2
# Example 2:

# Input: nums = [1,2,3], k = 3
# Output: 2
 

# Constraints:

# 1 <= nums.length <= 2 * 104
# -1000 <= nums[i] <= 1000
# -107 <= k <= 107
class Solution(object):
    def subarraySum(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        # return_num = 0
        # for each in range(1,len(nums)+1):

        #     for the_num in range(len(nums)-each+1):
        #         the_total = 0
        #         for all_num in range(the_num, each + the_num):
        #             the_total += nums[all_num]
        #         if the_total == k:
        #             #print(each)
        #             return_num += 1
        # return return_num
        current_sum = 0
        res = 0
        prefix_count = {}
        if len(nums) == 1 and nums[0] != 0 and k == 0:
            return 0
        #prefix_count[0] = 1
        for each in range(len(nums)):
            current_sum += nums[each]
            if current_sum - k in prefix_count:
                
                res += prefix_count[current_sum - k]
            if current_sum == k:
                res += 1
            if current_sum not in prefix_count:
                prefix_count[current_sum] = 1
            else:
                prefix_count[current_sum] += 1
            
            #print(prefix_count)
        return res
            

        