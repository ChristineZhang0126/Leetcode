# 152. Maximum Product Subarray
# Medium
# 17.8K
# 566
# Companies
# Given an integer array nums, find a 
# subarray
#  that has the largest product, and return the product.

# The test cases are generated so that the answer will fit in a 32-bit integer.

 

# Example 1:

# Input: nums = [2,3,-2,4]
# Output: 6
# Explanation: [2,3] has the largest product 6.
# Example 2:

# Input: nums = [-2,0,-1]
# Output: 0
# Explanation: The result cannot be 2, because [-2,-1] is not a subarray.
 

# Constraints:

# 1 <= nums.length <= 2 * 104
# -10 <= nums[i] <= 10
# The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

class Solution(object):
    def maxProduct(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        # brute force
        # max_pro = nums[0]
        # for i in range(0,len(nums)-1):
        #     for each in range(i,len(nums)):
        #         start = i
        #         pro = 1
        #         while start <= each:
        #             pro *= nums[start]
        #             start += 1
        #         max_pro = max(max_pro, pro)
        #         #print(max_pro)
        # if nums[len(nums)-1] > max_pro:
        #     max_pro = nums[len(nums)-1]
        

        # return max_pro 

        # dp
        #hash [max, min]
        new_hash = {}
        the_max = nums[0]
        new_hash[nums[0]] = [nums[0],nums[0]]
        for i in range(1,len(nums)):
            new_max = max((new_hash[nums[i-1]][0]) * nums[i],(new_hash[nums[i-1]][1]) * nums[i], nums[i])
            new_min = min((new_hash[nums[i-1]][0]) * nums[i],(new_hash[nums[i-1]][1]) * nums[i], nums[i])
            new_hash[nums[i]] = [new_max, new_min]
            the_max = max(the_max,new_max)
        return the_max
