# 53. Maximum Subarray
# Medium
# 32.9K
# 1.4K
# Companies
# Given an integer array nums, find the 
# subarray
#  with the largest sum, and return its sum.

 

# Example 1:

# Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
# Output: 6
# Explanation: The subarray [4,-1,2,1] has the largest sum 6.
# Example 2:

# Input: nums = [1]
# Output: 1
# Explanation: The subarray [1] has the largest sum 1.
# Example 3:

# Input: nums = [5,4,-1,7,8]
# Output: 23
# Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.
 

# Constraints:

# 1 <= nums.length <= 105
# -104 <= nums[i] <= 104

class Solution(object):
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        # Initialize variables to track current sum and maximum sum
        current_sum = nums[0]
        max_sum = nums[0]

        # Iterate through the array starting from the second element
        for num in nums[1:]:
            # Choose the maximum between the current number and the sum so far plus the current number
            current_sum = max(num, current_sum + num)
            
            # Update the maximum sum if the current sum is greater
            max_sum = max(max_sum, current_sum)

        return max_sum
